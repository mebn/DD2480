{"reason":"compiler-message","package_id":"build-fail 0.1.0 (path+file:///Users/njonsson/me/uni/DD2480_FundamentalsSoftwareEngineering/DD2480/assignment2/tests/libs/build-fail)","manifest_path":"/Users/njonsson/me/uni/DD2480_FundamentalsSoftwareEngineering/DD2480/assignment2/tests/libs/build-fail/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"build-fail","src_path":"/Users/njonsson/me/uni/DD2480_FundamentalsSoftwareEngineering/DD2480/assignment2/tests/libs/build-fail/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"src/main.rs:3:5: error[E0425]: cannot find value `fail` in this scope\n","children":[],"code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","message":"cannot find value `fail` in this scope","spans":[{"byte_end":51,"byte_start":47,"column_end":9,"column_start":5,"expansion":null,"file_name":"src/main.rs","is_primary":true,"label":"not found in this scope","line_end":3,"line_start":3,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":9,"highlight_start":5,"text":"    fail"}]}]}}
{"reason":"compiler-message","package_id":"build-fail 0.1.0 (path+file:///Users/njonsson/me/uni/DD2480_FundamentalsSoftwareEngineering/DD2480/assignment2/tests/libs/build-fail)","manifest_path":"/Users/njonsson/me/uni/DD2480_FundamentalsSoftwareEngineering/DD2480/assignment2/tests/libs/build-fail/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"build-fail","src_path":"/Users/njonsson/me/uni/DD2480_FundamentalsSoftwareEngineering/DD2480/assignment2/tests/libs/build-fail/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error: aborting due to previous error\n","children":[],"code":null,"level":"error","message":"aborting due to previous error","spans":[]}}
{"reason":"build-finished","success":false}
